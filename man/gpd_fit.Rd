% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/model_fit.R
\name{gpd_fit}
\alias{gpd_fit}
\title{Fit a time serie with a GPD distribution  .}
\usage{
gpd_fit(y, data, mu_mod = ~1, sig_mod = ~1, time_var, qthreshold,
  init = NULL)
}
\arguments{
\item{y}{the time serie to be fitted.}

\item{data}{a data.frame object with  where the function looks first for the variables y, time_var and the covariates specified in the mu_mod and sig_mod arguments.}

\item{mu_mod}{a formula defining the covariates to be used in quantile regression to set the threshold of the GPD.}

\item{sig_mod}{a formula defining the covariates the scale parameter of the GPD depends linearly on.}

\item{time_var}{a variable used to define the time in the time serie. It can also be a string giving the variable name.}

\item{qthreshold}{the level of quantile used to set the GPD threshold.}

\item{init}{vector of initialization parameter for the minimization of the negative log-likelihood. if NULL, the initialisation is done using the function fevd from the extRemes packages.}
}
\value{
returns an object of class gpd_fit. It contains the nlminb output which provides the estimated parameters as well the minimum of the negative log-likelihood. The arguments use to call gpd_fit.
}
\description{
\code{gpd_fit} fits a time serie with a GPD distribution a where  scale parameter depend linearly on a set of covariates.
}
\details{
MLE fit of a time serie y using a GPD distribution  where the scale parameter depen linearly on a set of covariates. The threshold is defined using quantile regression (function \code{rq} from the quantreg package. The optimization of the negative log-likelihood is done with nlminb function in R.
}
\examples{
data(tas)
#Example with the same covariate for the mean and variance parameter
gp_fit <- gpd_fit(eur_tas, data=tas, mu_mod=~avg_gbl_tas, sig_mod=~avg_gbl_tas, time_var="year", qthreshold=0.9)
# get the values of the mean and variance parameters of the GPD at each time
compute_par(gp_fit, tas)
# plot diagnostic plot of the fit : qqplot, density of fitted vs theorical density, times series ans return levels
plot(gp_fit)
}

